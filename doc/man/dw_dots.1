.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DECONWOLF" "1" "2022" "dw 0.4.1" ""
.hy
.SH NAME
.PP
deconwolf \f[B]dw\f[R] is a tool for deconvolution of wide field
microscopy stacks.
.PP
\f[B]dw dots\f[R] is the module that can be used to detect dots in tif
images and export them to a tsv file.
It uses a Laplacian of Gaussian (LoG) filter for initial detection and
can further fit the dots using a Gaussian model.
.SH SYNOPSIS
.PP
\f[B]dw dots\f[R] [\f[I]OPTIONS\f[R]] file1.tif file2.tif \&...
.SH OPTIONS
.PP
The program will assume that the dots are diffraction limited.
The following arguments are required for the program to know how to set
the filter sizes:
.TP
\f[B]--NA\f[R]
Numerical Aperture
.TP
\f[B]--ni\f[R]
refractive index
.TP
\f[B]--lambda\f[R]
emission wave length (in nm)
.TP
\f[B]--dx\f[R]
lateral pixel size of the image (not the sensor) in nm.
.TP
\f[B]--dz\f[R]
axial pixel size / distance between the planes in the image.
Specified in nm.
.PP
It is probably also a good idea to set:
.TP
\f[B]--fitting\f[R]
Enable fitting of dots.
Note that this take much more time than the initial dot detection,
especially if the dots are large (in terms of pixels).
.TP
\f[B]--ndots\f[R]
Specify the max amount of dots that should be exported (and possiby
fitted).
It is recommended that this is set manually when fitting is enabled.
.TP
\f[B]--threads t\f[R]
Set the number of computational threads to use.
.PP
If the dots are larger than the diffraction limit, you can use the
.PP
\f[B]--swell\f[R] parameter to hint how much larger they are.
.TP
\f[B]--swell s\f[R]
Specify how much larger the dots are, relative to the diffraction limit,
i.e.\ valid values are \f[I]s\f[R] ≤ 1.
.PP
To have full control of the filter sizes, it is possible to set them
explicitly (not reccomended) by the following options:
.TP
\f[B]--dog_ls\f[R]
Lateral sigma for the LoG filter.
.TP
\f[B]--dot_as\f[R]
Axial sigma for the LoG filter
.TP
\f[B]--fit_ls\f[R]
Lateral sigma for the initial guess of the dot fitting routine.
.TP
\f[B]--fit_as\f[R]
Axial sigma for the initial guess of the dot fitting routine.
.TP
\f[B]--overwrite\f[R]
If specified existing files will be overwritten.
.PP
The remaining options are:
.TP
\f[B]--fout file.tif\f[R]
Write out the filtered images (e.g.\ the LoG filtered image).
Only for debugging and only to be used when there is just one input
file.
.TP
\f[B]--help\f[R]
Show a brief help message
.TP
\f[B]--verbose\f[R]
Set the verbosity level.
.SH Method
.PP
\f[B]dw dots\f[R] will read one 2D or 3D image at a time and will
perform the following:
.IP \[bu] 2
Filter the image with a −LoG filter, using settings either derived from
the optical parameters or given explicitly at command line.
.IP \[bu] 2
Extract all local maxima, excluding pixels at the edges.
.IP \[bu] 2
Sort the maxima according to the −LoG value.
.IP \[bu] 2
Keep at most \f[B]--ndots\f[R].
.IP \[bu] 2
If \f[B]--fitting\f[R] is set, determine the dot locations with sub
pixel accuracy.
.IP \[bu] 2
Write the dots to a TSV file.
.SH INPUT
.PP
\f[B]dw dots\f[R] can read the same kind of files as \f[B]dw\f[R].
It does look for log files from deconwolf, and if one is found the input
image is rescaled according to the log file.
It works with 2D as well as 3D images.
.SH OUTPUT
.PP
A TSV file will be generated per input file (\f[V].dots.tsv\f[R]) as
well as a log file (\f[V].dots.log.txt\f[R]).
The TSV file will be sorted by the dot intensities.
.SH NOTES
.IP \[bu] 2
The LoG filter is implemented using symmetric mirroring at the image
edges.
It is possible that there are too few image planes for a 3D LoG filter,
in that case try running the program on a 2D projection.
.IP \[bu] 2
For 2D images the same columns will be seen in the output.
However the fitted z position as well as the fitted z size will be set
to 0.
.SH SEE ALSO
.PP
\f[B]dw\f[R], \f[B]dw_bw\f[R]
.SH WEB PAGE
.PP
<https://github.com/elgw/deconwolf/>
.SH REPORTING BUGS
.PP
Please report bugs at <https://github.com/elgw/deconwolf/issues/>
.SH COPYRIGHT
.PP
Copyright © 2022 Erik Wernersson.
License GPLv3+: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH AUTHORS
Erik Wernersson.
